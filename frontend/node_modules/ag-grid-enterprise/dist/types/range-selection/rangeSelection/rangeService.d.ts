import type { AgColumn, BeanCollection, CellPosition, CellRange, CellRangeParams, ClearCellRangeParams, IRangeService, NamedBean, PartialCellRange, RowPosition } from 'ag-grid-community';
import { AutoScrollService, BeanStub } from 'ag-grid-community';
export declare class RangeService extends BeanStub implements NamedBean, IRangeService {
    beanName: "rangeService";
    private rowModel;
    private dragService;
    private columnModel;
    private visibleColsService;
    private cellNavigationService;
    private pinnedRowModel;
    private rowPositionUtils;
    private cellPositionUtils;
    private ctrlsService;
    private valueService;
    wireBeans(beans: BeanCollection): void;
    private cellRanges;
    private lastMouseEvent;
    private bodyScrollListener;
    private lastCellHovered;
    private cellHasChanged;
    private newestRangeStartCell?;
    private dragging;
    private draggingRange?;
    private intersectionRange;
    autoScrollService: AutoScrollService;
    postConstruct(): void;
    onColumnsChanged(): void;
    refreshLastRangeStart(): void;
    isContiguousRange(cellRange: CellRange): boolean;
    getRangeStartRow(cellRange: PartialCellRange): RowPosition;
    getRangeEndRow(cellRange: PartialCellRange): RowPosition;
    setRangeToCell(cell: CellPosition, appendRange?: boolean): void;
    extendLatestRangeToCell(cellPosition: CellPosition): void;
    updateRangeEnd(cellRange: CellRange, cellPosition: CellPosition, silent?: boolean): void;
    private refreshRangeStart;
    getRangeEdgeColumns(cellRange: CellRange): {
        left: AgColumn;
        right: AgColumn;
    };
    extendLatestRangeInDirection(event: KeyboardEvent): CellPosition | undefined;
    setCellRange(params: CellRangeParams): void;
    setCellRanges(cellRanges: CellRange[]): void;
    private setNewestRangeStartCell;
    clearCellRangeCellValues(params: ClearCellRangeParams): void;
    createCellRangeFromCellRangeParams(params: CellRangeParams): CellRange | undefined;
    createPartialCellRangeFromRangeParams(params: CellRangeParams, allowEmptyColumns: boolean): PartialCellRange | undefined;
    addCellRange(params: CellRangeParams): void;
    getCellRanges(): CellRange[];
    isEmpty(): boolean;
    isMoreThanOneCell(): boolean;
    areAllRangesAbleToMerge(): boolean;
    private forEachRowInRange;
    removeAllCellRanges(silent?: boolean): void;
    private onBodyScroll;
    isCellInAnyRange(cell: CellPosition): boolean;
    isCellInSpecificRange(cell: CellPosition, range: CellRange): boolean;
    private isLastCellOfRange;
    isBottomRightCell(cellRange: CellRange, cell: CellPosition): boolean;
    getCellRangeCount(cell: CellPosition): number;
    private isRowInRange;
    getDraggingRange(): CellRange | undefined;
    onDragStart(mouseEvent: MouseEvent): void;
    intersectLastRange(fromMouseClick?: boolean): void;
    private rowMax;
    private rowMin;
    private updateValuesOnMove;
    onDragging(mouseEvent: MouseEvent | null): void;
    onDragStop(): void;
    private dispatchChangedEvent;
    private calculateColumnsBetween;
}

import { BaseManager } from '../baseManager';
import type { ChartContext } from '../chartContext';
import type { ChartHighlight } from '../chartHighlight';
import { ChartUpdateType } from '../chartUpdateType';
import { type Series } from './series';
/** Manager that handles all top-down series-area highlight concerns and state. */
export declare class SeriesAreaHighlightManager extends BaseManager {
    private readonly id;
    private readonly chart;
    private readonly ctx;
    private readonly highlight;
    private series;
    /** Last received event that still needs to be applied. */
    private pendingHoverEvent?;
    /** Last applied event. */
    private appliedHoverEvent?;
    /** Last applied event, which has been temporarily stashed during the main chart update cycle. */
    private stashedHoverEvent?;
    private hoverRect?;
    constructor(id: string, chart: {
        performUpdateType: ChartUpdateType;
    }, ctx: ChartContext, highlight: ChartHighlight);
    seriesChanged(series: Series<any, any>[]): void;
    dataChanged(): void;
    preSceneRender(): void;
    private update;
    private layoutComplete;
    private clearHighlight;
    private onHover;
    private readonly hoverScheduler;
    private handleHover;
    private changeHighlightDatum;
}
